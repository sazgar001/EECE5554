// Generated by gencpp from file vn_driver/Vectornav.msg
// DO NOT EDIT!


#ifndef VN_DRIVER_MESSAGE_VECTORNAV_H
#define VN_DRIVER_MESSAGE_VECTORNAV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <sensor_msgs/MagneticField.h>

namespace vn_driver
{
template <class ContainerAllocator>
struct Vectornav_
{
  typedef Vectornav_<ContainerAllocator> Type;

  Vectornav_()
    : header()
    , orientation()
    , angular_velocity()
    , linear_acceleration()
    , mag_field()
    , raw_imu_data()  {
    }
  Vectornav_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , orientation(_alloc)
    , angular_velocity(_alloc)
    , linear_acceleration(_alloc)
    , mag_field(_alloc)
    , raw_imu_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::sensor_msgs::MagneticField_<ContainerAllocator>  _mag_field_type;
  _mag_field_type mag_field;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _raw_imu_data_type;
  _raw_imu_data_type raw_imu_data;





  typedef boost::shared_ptr< ::vn_driver::Vectornav_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vn_driver::Vectornav_<ContainerAllocator> const> ConstPtr;

}; // struct Vectornav_

typedef ::vn_driver::Vectornav_<std::allocator<void> > Vectornav;

typedef boost::shared_ptr< ::vn_driver::Vectornav > VectornavPtr;
typedef boost::shared_ptr< ::vn_driver::Vectornav const> VectornavConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vn_driver::Vectornav_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vn_driver::Vectornav_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vn_driver::Vectornav_<ContainerAllocator1> & lhs, const ::vn_driver::Vectornav_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.orientation == rhs.orientation &&
    lhs.angular_velocity == rhs.angular_velocity &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.mag_field == rhs.mag_field &&
    lhs.raw_imu_data == rhs.raw_imu_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vn_driver::Vectornav_<ContainerAllocator1> & lhs, const ::vn_driver::Vectornav_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vn_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vn_driver::Vectornav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vn_driver::Vectornav_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vn_driver::Vectornav_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vn_driver::Vectornav_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vn_driver::Vectornav_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vn_driver::Vectornav_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vn_driver::Vectornav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec6b3f22b033bcf54d221a7024af8b27";
  }

  static const char* value(const ::vn_driver::Vectornav_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec6b3f22b033bcf5ULL;
  static const uint64_t static_value2 = 0x4d221a7024af8b27ULL;
};

template<class ContainerAllocator>
struct DataType< ::vn_driver::Vectornav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vn_driver/Vectornav";
  }

  static const char* value(const ::vn_driver::Vectornav_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vn_driver::Vectornav_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# VectorNav IMU and Magnetometer Data\n"
"\n"
"Header header                               # Standard message header\n"
"geometry_msgs/Quaternion orientation        # Orientation in quaternion (w, x, y, z)\n"
"geometry_msgs/Vector3 angular_velocity      # Angular velocity\n"
"geometry_msgs/Vector3 linear_acceleration   # Linear acceleration\n"
"sensor_msgs/MagneticField mag_field         # Magnetometer data\n"
"string raw_imu_data                        # Raw IMU data string for debugging/analysis\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: sensor_msgs/MagneticField\n"
" # Measurement of the Magnetic Field vector at a specific location.\n"
"\n"
" # If the covariance of the measurement is known, it should be filled in\n"
" # (if all you know is the variance of each measurement, e.g. from the datasheet,\n"
" #just put those along the diagonal)\n"
" # A covariance matrix of all zeros will be interpreted as \"covariance unknown\",\n"
" # and to use the data a covariance will have to be assumed or gotten from some\n"
" # other source\n"
"\n"
"\n"
" Header header                        # timestamp is the time the\n"
"                                      # field was measured\n"
"                                      # frame_id is the location and orientation\n"
"                                      # of the field measurement\n"
"\n"
" geometry_msgs/Vector3 magnetic_field # x, y, and z components of the\n"
"                                      # field vector in Tesla\n"
"                                      # If your sensor does not output 3 axes,\n"
"                                      # put NaNs in the components not reported.\n"
"\n"
" float64[9] magnetic_field_covariance # Row major about x, y, z axes\n"
"                                      # 0 is interpreted as variance unknown\n"
;
  }

  static const char* value(const ::vn_driver::Vectornav_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vn_driver::Vectornav_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.orientation);
      stream.next(m.angular_velocity);
      stream.next(m.linear_acceleration);
      stream.next(m.mag_field);
      stream.next(m.raw_imu_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vectornav_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vn_driver::Vectornav_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vn_driver::Vectornav_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "angular_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_velocity);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "mag_field: ";
    s << std::endl;
    Printer< ::sensor_msgs::MagneticField_<ContainerAllocator> >::stream(s, indent + "  ", v.mag_field);
    s << indent << "raw_imu_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.raw_imu_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VN_DRIVER_MESSAGE_VECTORNAV_H
